// module-level build.gradle file, located in each PROJECT/MODULE/ directory, allows you to configure build settings FOR THE SPECIFIC MODULE it is located in.
// Configuring these build settings allows you to provide custom packaging options, such as additional build types and product flavors,
// and override settings in the main/ app manifest or top-level build.gradle file.

/**
 * The first line in the build configuration applies the Android plugin for
 * Gradle to this build and makes the android block available to specify
 * Android-specific build options.
 */
apply plugin: 'com.android.application'

/**
 * The android block is where you configure all your Android-specific build options.
 */
android {
    /**
     * compileSdkVersion specifies the Android API level GRADLE SHOULD USE TO
     * COMPILE YOUR APP. This means your app can use the API features included in
     * this API level and lower.
     */
    compileSdkVersion 28
    /**
     * The defaultConfig block encapsulates DEFAULT SETTINGS AND ENTRIES FOR ALL
     * BUILD VARIANTS, and can override some attributes in main/AndroidManifest.xml
     * dynamically from the build system. You can configure product flavors to override
     * these values for different versions of your app.
     */
    defaultConfig {
        /**
         * applicationId uniquely identifies the package for publishing.
         * However, your source code should still reference the package name
         * defined by the package attribute in the main/AndroidManifest.xml file.
         */
        applicationId "com.example.android.miwok"
        // Defines the minimum API level required to run the app.
        minSdkVersion 15
        // Specifies the API level used to test the app.
        targetSdkVersion 28
        // Defines the version number of your app.
        versionCode 1
        // Defines a user-friendly version name for your app.
        versionName "1.0"
    }

    // https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.BuildType.html
    /**
     * The buildTypes block is where you can configure multiple build types.
     * By default, the build system defines two build types: debug and release. The
     * debug build type is not explicitly shown in the default build configuration,
     * but it includes debugging tools and is signed with the debug key. The release
     * build type applies Proguard settings and is not signed by default.
     */
    buildTypes {
        /**
         * By default, Android Studio configures the release build type to enable code
         * shrinking, using minifyEnabled, and specifies the default Proguard rules file.
         */
        release {
            // Enables code shrinking for the release build type.
            // Whether removal of unused java code is enabled.
            minifyEnabled false
            // Specifies the default ProGuard configuration files that the plugin should use.

//            R8 uses ProGuard rules files to modify its default behavior and better understand your app’s structure,
//            such as the classes that serve as entry points into your app’s code. Although you can modify some of these
//            rules files, some rules may be generated automatically by compile-time tools,
//            such as AAPT2, or inherited from your app’s library dependencies.

//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            // When you create a new module using Android Studio, the IDE creates a proguard-rules.pro file in the root directory of that module.
            //By default, this file does not apply any rules. So, include your own ProGuard rules here.

            // The Android Gradle plugin generates proguard-android-optimize.txt, which includes rules that are useful to most Android projects and enables @Keep* annotations.
            //By default, when creating a new module using Android Studio, the module-level build.gradle file includes this rules file in your release build for you.
        }
    }

    /**
     * buildToolsVersion specifies the version of the SDK build tools, command-line
     * utilities, and compiler that Gradle should use to build your app. You need to
     * download the build tools using the SDK Manager.
     *
     * This property is optional because the plugin uses a recommended version of
     * the build tools by default.
     */
    buildToolsVersion = '28.0.3'

    /**
     * The productFlavors block is where you can configure multiple product flavors.
     * This allows you to create different versions of your app that can
     * override the defaultConfig block with their own settings. Product flavors
     * are optional, and the build system does not create them by default.
     *
     * eg free and paid product flavor. Each product flavor
     * then specifies its OWN APPLICATION ID, so that they can exist on the Google
     * Play Store, or an Android device, simultaneously.
     *
     * If you declare product flavors, you must also declare flavor dimensions
     * and ASSIGN EACH FLAVOR TO A FLAVOR DIMENSION.
     */
    productFlavors {
    }
}

// Specifies dependencies required to build only the module itself.
dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:support-v4:28.0.0'
    implementation 'com.android.support:design:28.0.0'
}

